"use client"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Progress } from "@/components/ui/progress"
import { Collapsible, CollapsibleContent, CollapsibleTrigger } from "@/components/ui/collapsible"
import { CheckCircle, Circle, Clock, BookOpen, Target, ChevronDown, Download, Calendar } from "lucide-react"

interface StudySession {
  id: string
  topic: string
  duration: number
  type: "theory" | "practice" | "revision"
  priority: "high" | "medium" | "low"
  completed: boolean
  resources: string[]
}

interface StudyDay {
  date: string
  dayName: string
  sessions: StudySession[]
  totalHours: number
  completed: boolean
}

// Mock data - in real app this would be generated by AI
const mockStudyPlan: StudyDay[] = [
  {
    date: "2024-01-16",
    dayName: "Monday",
    sessions: [
      {
        id: "1",
        topic: "Data Structures - Arrays & Linked Lists",
        duration: 2,
        type: "theory",
        priority: "high",
        completed: true,
        resources: ["Textbook Ch. 3", "Video Lecture 1", "Practice Problems 1-10"],
      },
      {
        id: "2",
        topic: "Data Structures - Practice Problems",
        duration: 1.5,
        type: "practice",
        priority: "high",
        completed: true,
        resources: ["Coding Platform", "Previous Year Questions"],
      },
    ],
    totalHours: 3.5,
    completed: true,
  },
  {
    date: "2024-01-17",
    dayName: "Tuesday",
    sessions: [
      {
        id: "3",
        topic: "Algorithms - Sorting Algorithms",
        duration: 2.5,
        type: "theory",
        priority: "high",
        completed: false,
        resources: ["Textbook Ch. 7", "Algorithm Visualization", "Implementation Practice"],
      },
      {
        id: "4",
        topic: "Previous Day Revision",
        duration: 1,
        type: "revision",
        priority: "medium",
        completed: false,
        resources: ["Quick Notes", "Flashcards"],
      },
    ],
    totalHours: 3.5,
    completed: false,
  },
  {
    date: "2024-01-18",
    dayName: "Wednesday",
    sessions: [
      {
        id: "5",
        topic: "Database Systems - Normalization",
        duration: 2,
        type: "theory",
        priority: "high",
        completed: false,
        resources: ["Database Textbook Ch. 5", "SQL Practice", "Normalization Examples"],
      },
      {
        id: "6",
        topic: "Algorithms - Practice Session",
        duration: 1.5,
        type: "practice",
        priority: "medium",
        completed: false,
        resources: ["Coding Problems", "Time Complexity Analysis"],
      },
    ],
    totalHours: 3.5,
    completed: false,
  },
]

export function GeneratedStudyPlan() {
  const [studyPlan] = useState<StudyDay[]>(mockStudyPlan)
  const [expandedDays, setExpandedDays] = useState<string[]>(["2024-01-16"])

  const toggleDay = (date: string) => {
    setExpandedDays((prev) => (prev.includes(date) ? prev.filter((d) => d !== date) : [...prev, date]))
  }

  const getSessionIcon = (type: string) => {
    switch (type) {
      case "theory":
        return <BookOpen className="h-4 w-4" />
      case "practice":
        return <Target className="h-4 w-4" />
      case "revision":
        return <Clock className="h-4 w-4" />
      default:
        return <Circle className="h-4 w-4" />
    }
  }

  const getPriorityColor = (priority: string) => {
    switch (priority) {
      case "high":
        return "bg-red-100 text-red-800"
      case "medium":
        return "bg-yellow-100 text-yellow-800"
      case "low":
        return "bg-green-100 text-green-800"
      default:
        return "bg-gray-100 text-gray-800"
    }
  }

  const completedDays = studyPlan.filter((day) => day.completed).length
  const totalDays = studyPlan.length
  const overallProgress = (completedDays / totalDays) * 100

  return (
    <div className="space-y-6">
      {/* Progress Overview */}
      <div className="space-y-3">
        <div className="flex items-center justify-between">
          <h3 className="font-medium">Overall Progress</h3>
          <span className="text-sm text-muted-foreground">
            {completedDays} of {totalDays} days completed
          </span>
        </div>
        <Progress value={overallProgress} className="h-2" />
      </div>

      {/* Action Buttons */}
      <div className="flex items-center space-x-3">
        <Button size="sm" variant="outline">
          <Download className="h-4 w-4 mr-2" />
          Export PDF
        </Button>
        <Button size="sm" variant="outline">
          <Calendar className="h-4 w-4 mr-2" />
          Sync to Calendar
        </Button>
      </div>

      {/* Study Plan Timeline */}
      <div className="space-y-4">
        {studyPlan.map((day) => (
          <Collapsible key={day.date} open={expandedDays.includes(day.date)} onOpenChange={() => toggleDay(day.date)}>
            <CollapsibleTrigger asChild>
              <div className="flex items-center justify-between p-4 border rounded-lg cursor-pointer hover:bg-muted/50">
                <div className="flex items-center space-x-4">
                  {day.completed ? (
                    <CheckCircle className="h-5 w-5 text-green-500" />
                  ) : (
                    <Circle className="h-5 w-5 text-muted-foreground" />
                  )}
                  <div>
                    <h4 className="font-medium">
                      {day.dayName}, {new Date(day.date).toLocaleDateString()}
                    </h4>
                    <p className="text-sm text-muted-foreground">
                      {day.sessions.length} sessions • {day.totalHours} hours
                    </p>
                  </div>
                </div>
                <div className="flex items-center space-x-2">
                  <Badge variant={day.completed ? "default" : "secondary"}>
                    {day.completed ? "Completed" : "Pending"}
                  </Badge>
                  <ChevronDown className="h-4 w-4" />
                </div>
              </div>
            </CollapsibleTrigger>

            <CollapsibleContent>
              <div className="ml-4 mt-4 space-y-3 border-l-2 border-muted pl-4">
                {day.sessions.map((session) => (
                  <div key={session.id} className="space-y-3">
                    <div className="flex items-start justify-between">
                      <div className="flex items-start space-x-3">
                        <div className="mt-1">
                          {session.completed ? (
                            <CheckCircle className="h-4 w-4 text-green-500" />
                          ) : (
                            <Circle className="h-4 w-4 text-muted-foreground" />
                          )}
                        </div>
                        <div className="flex-1">
                          <div className="flex items-center space-x-2 mb-1">
                            {getSessionIcon(session.type)}
                            <h5 className="font-medium">{session.topic}</h5>
                          </div>
                          <div className="flex items-center space-x-2 mb-2">
                            <Badge variant="outline" className="text-xs">
                              {session.duration}h
                            </Badge>
                            <Badge variant="outline" className="text-xs capitalize">
                              {session.type}
                            </Badge>
                            <Badge className={`text-xs ${getPriorityColor(session.priority)}`}>
                              {session.priority} priority
                            </Badge>
                          </div>
                          <div className="space-y-1">
                            <p className="text-xs text-muted-foreground">Resources:</p>
                            <ul className="text-xs text-muted-foreground space-y-1">
                              {session.resources.map((resource, index) => (
                                <li key={index}>• {resource}</li>
                              ))}
                            </ul>
                          </div>
                        </div>
                      </div>
                      <Button size="sm" variant="ghost">
                        {session.completed ? "Review" : "Start"}
                      </Button>
                    </div>
                  </div>
                ))}
              </div>
            </CollapsibleContent>
          </Collapsible>
        ))}
      </div>

      {/* Study Tips */}
      <div className="p-4 bg-accent/10 rounded-lg">
        <h4 className="font-medium mb-2">Study Tips</h4>
        <ul className="text-sm text-muted-foreground space-y-1">
          <li>• Take 15-minute breaks every 2 hours of study</li>
          <li>• Review previous day's topics before starting new ones</li>
          <li>• Practice coding problems daily for programming topics</li>
          <li>• Use active recall techniques instead of passive reading</li>
        </ul>
      </div>
    </div>
  )
}
